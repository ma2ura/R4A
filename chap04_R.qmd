---
title: "Rの基礎"
---


::: {.callout-important}
## 覚えておくべき内容

1. オブジェクトの作り方
2. オブジェクトの型
3. 数値型，文字列，論理型，因子型，行列型，データフレーム型
:::


## Rの基礎

Rの基本的な使い方を学びます。
Rがあつかうデータや分析結果などを格納するため，名前をつけて扱うことができるものを一般に**オブジェクト**(object)とよびます。
Rでは，オブジェクトの型として，次のようなものがあります。

- `numeric` : 実数 (浮動小数点数)
- `character` : 文字列
- `logical` : 論理値 TRUE または FALSE
- `factor` : ファクター型・因子型
- `matrix` : 行列
- `data.frame` : データフレーム
- `list` : リスト
- `NULL` : 空のオブジェクト

ここでは，それぞれの型の特徴を簡単に説明します。

### 変数の代入

オブジェクトに値を代入するには、`<-`を使います。
`x`に数値の`2`を代入してみます。

```{r}
x <- 2
x
```

### 数値型

この`x`の型を調べるには、`class()`を使います。

```{r}
class(x)
```

`numeric`と表示され，このオブジェクト`x`は数値型であることが分かりました。
数値に対しては，四則演算やべき乗などの演算子が使えます。

### 文字列

文字列を代入する場合は`""`で囲みます。

```{r}
y <- "Hello, World!" # 文字列を代入
y # 変数yの値を表示
```

では、次の場合はどうなるか考えてみてください。

::: {.panel-tabset}

## コード

```{r}
#| eval: false
z <- "3"
z
```



## 結果

```{r}
#| echo: false
z <- "3"
z
```
一見、数値の3が代入されているようにみえますが、`"3"`のように`"`で囲まれているので、文字列として扱われます。
:::


```{r}
class(y)
class(z)
```

`y`も`z`も`character`と表示され、文字列型であることが分かりました。
文字列に対して，`+`や`-`などの演算子は使えませんが，文字列操作のための関数を利用して処理を行います。

### 論理型

論理型は`TRUE`と`FALSE`の2つの値をとります。
論理型に対しては，論理演算子が使えます。

```{r}
a <- c(1,2,3,4,5) # 数ベクトル
b <- a < 3 # 条件式
b
```

この`b`のクラスを調べてみましょう。

```{r}
class(b)
```

`b`は`logical`であり，論理型であることが分かりました。
論理型は，条件式の評価結果として得られることが多いです。
例えば，条件を満たすデータの個数を調べる場合は，

```{r}
sum(b) # bは論理型
```

`2`と表示され，数ベクトル`a`のうち，条件式`a < 3`を満たすデータは2つであることが分かります。

### 因子型

**因子型**(factor class)は，カテゴリー型のデータを扱うための型です。
因子型であるかどうかは，分析者が明示的に指定する必要があります。
例えば，アンケート結果のデータには，大学の学年を表す変数があるとします。

```{r}
grade <- c("1回生", "2回生", "2回生", "3回生", "4回生", "4回生")
```

この`grade`のクラスを調べてみましょう。

```{r}
class(grade)
```

`grade`は`character`であり，文字列型であることが分かりました。
ここで，この`grade`はただの文字列ではなく，カテゴリーを表しているので，
たとえば，1回生は1，2回生は2，という風に数値だったとしても，同じカテゴリーを表します。


```{r}
grade_num <- c(1, 2, 2, 3, 4, 4)
class(grade_num)
```

この`grade_num`は`numeric`であり，数値型ですが，`1`は1回生，`2`は2回生，`3`は3回生，`4`は4回生を表すカテゴリー変数です。

このようなカテゴリーを表す文字列や数値を，因子型としてRに認識させることで，分析が便利になります。
カテゴリーを表す変数を因子型に変換するには，

- `as.factor()`関数 : 単に因子型に変換するだけ
- `factor()`関数 : 因子型にしつつ追加の特徴もつけられる
- `forecats:::fct_relevel()`関数 : 便利だけれど，ここでは使わない

のいずれかを使います。

```{r}
as.factor(grade)
factor(grade)
```

いずれも因子型に変換され，`Levels`としてカテゴリーが表示されます。

```{r}
as.factor(grade_num)
factor(grade_num)
```
`as.factor()`関数と`factor()`関数は数ベクトルも因子型に変換できますが，`forcats:::fct_relevel()`関数は文字列型のみしか変換できません。
ここでは，`factor()`関数を使うことにします。
`factor()`関数の引数は，

- `x` : 変換する変数
- `levels` : 含まれるカテゴリー，すべてのカテゴリーを明記する必要がある。
- `labels` : カテゴリーに割り当てるカテゴリー名
- `ordered` : 順番を明示するかどうか

の4つです。
次に，数ベクトル`grade_num`を因子型に変換しつつ，数値が表すカテゴリー名を指定して，順番があることを明示したものを`f_grade_num`に代入します。

```{r}
f_grade_num <- factor(grade_num, # 変換する変数
    levels = c(1, 2, 3, 4), # 含まれるカテゴリー
    labels = c("1回生", "2回生", "3回生", "4回生"), # カテゴリー名
    ordered = TRUE # 順番を明示
    )
f_grade_num
```

`f_grade_num`が因子型となり，`Levels`としてカテゴリーが`Levels: 1回生 < 2回生 < 3回生 < 4回生`のように順番があることをRが認識していることがわかります。
この`f_grade_num`のクラスを調べてみましょう。

```{r}
class(f_grade_num)
```

`"ordered"`と`"factor"`と表示され，順序のある因子型であることが分かりました。


### 行列型

**行列型**(matrix class)は，行と列にデータが格納された2次元のデータ構造です。
行列型は，`matrix()`関数を使って作成します。
`matrix()`関数の引数は主に，

- `data` : 行列に格納するデータ
- `nrow` : 行数
- `ncol` : 列数

です。
例えば，次の行列を作成してみましょう。

$$
\begin{aligned}
\boldsymbol{A} =
\begin{pmatrix}
1 & 2 & 3 \\
4 & 5 & 6 \\
7 & 8 & 9
\end{pmatrix}
\end{aligned}
$$

```{r}
A = matrix(c(1, 3, 7, 2, 5, 8, 5, 9, 4), # 行列に格納するデータ
    nrow = 3, # 行数
    ncol = 3 # 列数
    )
A
```
数値を格納した行列型`A`が作成されました。
ついでみ，行列に含まれるデータの文字列が含まれていたらどうなるか調べてみましょう。2行1列のデータに`"2"`を入れてみます。
```{r}
B = matrix(c(1, 3, 7, "2", 5, 8, 5, 9, 4), # 行列に格納するデータ
    nrow = 3, # 行数
    ncol = 3 # 列数
    )
B
```
すべてのデータが文字列型になってしまいました。
このように行列式は1種類の型しか格納できない，という特徴があります。

数値でできた行列`A`のクラスを調べてみましょう。

```{r}
class(A)
```

`A`は`"matrix"`と`"array"`であり，行列型(そして配列型array)であることが分かりました。
因子分析や主成分分析を厳密に使う，あるいは統計分析の手法を自分で実装しようとしない限り，行列型を使うことはないのですが，Rは逆行列の計算や固有値・固有ベクトルの計算など，行列計算が早く，便利な関数が多く用意されています。

例えば，行列`A`の逆行列を計算するには，`solve()`関数を使います。

```{r}
inverseA <- solve(A)
inverseA
```

逆行列が計算できているかどうかを確認してみる。

$$
\begin{aligned}
\boldsymbol{A} \times \boldsymbol{A}^{-1} = \boldsymbol{I} =
\begin{pmatrix}
1 & 0 & 0 \\
0 & 1 & 0 \\
0 & 0 & 1
\end{pmatrix}
\end{aligned}
$$

行列のかけ算は`%*%`で行います。

```{r}
I <- A %*% inverseA
round(I, digits = 2)
```

Rの数値計算では，浮動小数点数演算における丸め誤差のため，`round()`関数で小数点以下第2位で四捨五入した結果を表示してみました。単位行列$\boldsymbol{I}$になっていることが分かりました。

### データフレーム型

**データフレーム型**(data.frame class)は，行と列にデータが格納された2次元のデータ構造です。
行列型と似ていますが，データフレーム型は，行ごとに異なる型のデータを格納することができます。

データフレーム`data.frame`型は非常に重要な型で，Rでデータ分析を行う際には，ほとんどの場合，データフレーム型を扱うことになります。
次のセクションで，データフレーム型について詳しく説明します。

