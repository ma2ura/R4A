---
title: "整然データ"
---

## 整然データとは

<!--
“Tidy datasets are all alike, but every messy dataset is messy in its own way.”
-->
> 整然データセットはみんな似ているが，汚いデータセットはみんな独特で散らかっている。
> — Hadley Wickham


R神Hadley Wickham氏は，データの型を理解することを，データ分析の第一歩とし，その一貫として**整然データ**(tidy data)という考え方を提唱しています。
整然データとは，次のようなルールに従って構築されたデータのことです(Wickham, 2014), 参考[https://id.fnshr.info/2017/01/09/tidy-data-intro/](https://id.fnshr.info/2017/01/09/tidy-data-intro/)。


<!--
1. Each variable is a column; each column is a variable.
2. Each observation is a row; each row is an observation.
3. Each value is a cell; each cell is a single value.
 -->

:::{.callout-important}
1. 各観測値(observation)は行(row)であり、各行は1つの観測値である。
1. 各変数(variable)は列(column)であり、各列は1つの変数である。
1. 各値(value)はセル(cell)であり、1セルは1つの値である。
:::


:::{layout-ncol=3}
![1.観測値](img/observation.png)

![2.変数](img/variables.png)

![3.値](img/values.png)
:::

整然データのルールを満たすデータは，データの整理や可視化が容易になります。
そして整然データを扱うために非常に強力なツールを提供してくれるのが，`tidyverse`パッケージ群です。
以下では，`tidyverse`パッケージ群の中でも，データの整理に特化した`tidyr`パッケージを使って，整然データを作成する方法を学びます。

```{r}
library(tidyr)
```

### long形式とwide形式

人間には読みやすいけれどパソコンは読みにくい，というデータの形式があります。例えば下の表を見てみましょう。

| 地点    |   2022    |   2023   |
|:------:|:--------:|:--------:|
| トヨタ自動車 | 31379507  | 37154298  |
| 日産自動車 | 8424585  |  10596695  |
| 本田技研工業 |  14552696  | 16907725  |
: 自動車会社3社の売上高

このような形のデータをワイド形式(wide)といいます。
この表は，人間にとっては分かりやすいですが，実はコンピュータにとっては，分かりにくいものです。
またこのデータは、列が変数になっていないので整然データではありません。

コンピュータが理解しやすいデータとして表すなら，次のような表になります。

| 企業名     |  年度 |  売上高     |
|:---------:|:----:|:-----------:|
| トヨタ自動車 | 2022  | 31379507    |
| トヨタ自動車 | 2023  | 37154298    |
| 日産自動車   | 2022  | 8424585    |
| 日産自動車   | 2023  | 10596695    |
| 本田技研工業 | 2022  | 14552696    |
| 本田技研工業 | 2023  | 16907725    |
: 自動車会社のロング型の表

このような形式のデータをロング型(long)といいます。

上の表は，行が、トヨタの2022年度の売上高、といったように1つの行が1つの観測を表しています(ルール1)。
企業名、年度、売上高の3列から構成されていて、1列が1つの変数を意味している(ルール2)。
各セルには1つの値が入っています(ルール3)。
よって，これが整然データとなります。

上のロング型のデータを使って，ロングからワイド，ワイドからロングの操作を学びましょう。
`data.frame()`関数を使って，3つの変数`name`，`year`，`sale`をもつデータフレームを作ります。
```{r}
#| message: false
library(knitr)
library(kableExtra)
df_car <- data.frame(
    # rep("札幌",3)は"札幌"を3回繰り返すという意味
    name = c(rep("トヨタ",2),rep("日産",2),rep("ホンダ",2)),
    year = rep(c("2022", "2023"),3), # 時点
    sale = c(31379507,37154298,8424585,10596695,14552696,16907725) # 気温
)
df_car |> kable() |> kable_styling(font_size = 20)
```

これはロング型の整然データとなります。

### ロングからワイド `pivot_wider` {.unnumbered}

Rで使うならこのままでよいのですが，あえてこれをワイド型に変えてみましょう。

![ワイド型をロング型に](img/long_to_wide.png)

<!-- 
::: {.column-margin}
教科書などでよく使用されている`spread()`は「根本的に設計ミスってた」と公式で発表されているので，R神が作った`pivot_wider()`を使います。widerという名前の通り，ワイド型に変換する関数です。
::: 
-->

データフレームをロング型からワイド型に変換するには、`tidyr`パッケージの`pivot_wider()`関数を使います。

:::{.column-margin}
以前は、`reshap2`パッケージの`dcast()`関数や、その改良版の`tidyr`パッケージの`spread()`関数が使われていました。しかし、これらは根本的に設計ミスがあるとして、新たに設計しなおされた`tidyr`の`pivot_wider()`が現在のベストプラクティスです。
:::

`pivot_wider()`の主な引数は，

- `names_from`
- `values_from`

です。
`names_from`は，ワイド型に変換するときに，どの変数の値を列にするかを指定します。
`values_from`は、`names_from`で指定した変数の値が列になったとき、どの値をもつ変数にするのかを指定します。

以下のコードでは，`year`変数の値(つまり2022と2023)を列に，その変数が`sale`変数の値をもつように指定し，`df_wide`という変数に代入しています。

```{r}
df_wide <- df_car |>
    pivot_wider(
        names_from = year, # 列にする変数
        values_from = sale # 変数がもつ値
        )
df_wide |> kable() |> kable_styling(font_size = 20)
```
これでワイド型に変換できました。

### ワイドからロング `pivot_longer` {.unnumbered}


次に，このワイド型のデータをロング型に変換してみます。

![ワイド型をロング型に](img/wide_to_long.png)

データフレームをワイド型からロング型に変換するには、`tidyr`パッケージの`pivot_longer()`関数を使います。

:::{.column-margin}
以前は、`reshap2`パッケージの`melt()`関数や、その改良版の`tidyr`パッケージの`gahter()`関数が使われていました。しかし、これらは根本的に設計ミスがあるとして、新たに設計しなおされた`tidyr`の`pivot_longer()`が現在のベストプラクティスです。
:::

ば



`pivot_longer()`の引数は，`cols`と`names_to`と`values_to`です。

- `cols`は，ロング型に変換するときに，どの変数を行にするかを指定
- `names_to`は，ロング型に変換するときに，どの変数の値を使うかを指定
- `values_to`は，ロング型に変換するときに，どの変数の値を使うかを指定

以下のコードでは，`2022`，`2023`の2つの変数を行に，`year`という変数の値を列に，`sale`という変数の値を値にして，`df_long`という変数に代入しています。

```{r}
df_long <- df_wide |>
    pivot_longer(
        cols = c("2022","2023"), # 縦にする変数
        names_to = "year", # 縦にした変数名
        values_to = "sale") # 値
df_long |> kable() |> kable_styling(font_size = 20)
```

元のロング型に戻りました。

## 練習してみよう。

まず、

```{webr}
df_car <- data.frame(
    name = c(rep("トヨタ",2),rep("日産",2),rep("ホンダ",2)),
    year = rep(c("2022", "2023"),3), # 時点
    sale = c(31379507,37154298,8424585,10596695,14552696,16907725) # 気温
)

# ロングをワイドにしてみましょう。
df |>
    pivot_wider(names_from = year, values_from = sale)
```
