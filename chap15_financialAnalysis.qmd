---
title: "財務分析のための前処理"
---

この章では、よく財務分析の教科書に登場する財務比率(financial ratio)の使い方や計算方法について説明します。
財務比率は、企業の財務状態を把握するための指標であり、企業の経営者や投資家、債権者、株主などが企業の財務状態を判断するために利用します。

財務比率を計算して、作図や作表するまでのプロセスはざっくり以下の通りです。

1. `read_csv()`でデータを読み込む。
2. `dplyr::rename()`で変数名を変更する。
3. `str()`で変数の型を確認し、カテゴリー変数を`factor()`とか`as.factor()`で因子型に変換する。
4. 欠損値にゼロを代入するか、その行を除去するかの方針を定めて、`dplyr::filter()`でデータを抽出したり、`dplyr::drop_na()`で欠損値を除去したりする。
5. 欠損値のないデータセットができたら、`dplyr::group_by()`と一緒に`dplyr::summarise()`や`dplyr::mutate()`を使って財務比率を計算する。
6. 計算した財務比率を`ggplot2`で作図したり、`kableExtra`で表を作成する。


財務比率は、企業の財務諸表項目の分数で表されるため、`group_by()`関数や`mutate()`関数を使うことで計算していきます。

必要なパッケージを読み込んでおきます。

```{r include=FALSE}
source("global.R") # 表の見た目を整えるための設定
library(tidyverse) # tidyverseパッケージ群
library(knitr) # 作表
library(kableExtra) # 作表の拡張
library(scales) # 軸の数値を制御
knitr::opts_chunk$set(dev = "ragg_png") # 文字化け対策
```


この章で分析対象とする企業は，

- 2010年度から2023年度までに期間に，
- 東京証券取引所のプライム・スタンダード・グロース市場に上場し，
- 従業員数が500名以上いる企業

とします。


この章で用いる会計項目は，

- `R001` 決算月数
- `R018` 上場場部：コード
- `R022` 日経業種：コード
- `B063` 有形固定資産
- `B110` 資産合計
- `D021` 売上高・営業収益
- `D101` 法人税等
- `D103` 法人税等調整額
- `D047` 支払利息・割引料
- `D110` 親会社株主に帰属する当期純利益
- `K075` [販管費] 人件費・福利厚生費
- `K079` [販管費] 賃借料
- `H021` 期末従業員数
- `D001` 営業利益［累計］
- `D001` 受取利息・配当金［累計］
- `D001` 持分法を適用した場合の投資損益［累計］
- `D001` 株主資本
- `D001` 評価・換算差額等／累積その他の包括利益
- `D001` 受取手形・売掛金及び契約資産／売掛金及びその他の短期債権
- `D001` 棚卸資産
- `D001` 売上原価・営業原価［累計］



です。
日経NEEDS社会科学情報検索システムでデータを集めるときは，以下の項目コードを使ってください。

```
R001,R018,R022,B063,B110,D021,D101,D103,D047,D110,K075,K079,H021
```

### データの読み込みと前処理

まずは分析するためのデータを読み込みます。
`getwd()`や`setwd()`を使って、CSVファイルが入っているフォルダが作業ディレクトリ(working directory)になっているかどうか確認・設定しておきましょう。

:::{.callout-caution}
日経NEEDS社会科学情報検索システムからダウンロードしたデータは，文字コードがShift-JISであるため，UTF-8を基本とするMacだと`read_csv`関数でそのまま読み込むと文字化けします。
そのため，`read_csv`関数の`locale`引数で`locale(encoding = "Shift_JIS")`を指定して読み込む必要があります。
`Shift_JIS`のところは，`cp932`や`sjis`でも大丈夫です。
:::

```{r}
#| cache: TRUE
df <- read_csv("data/TSE_2010_EMP500.csv")
```

:::{.column-margin}
`read_csv`関数でデータを読み込むと，
"Use `spec()` to retrieve the full column specification for this data."
"Specify the column types or set `show_col_types = FALSE` to quiet this message."
というメッセージが出ます。
読み込んだデータの完全な仕様(specification)をみたいなら`spec()`関数を使ってね。このメッセージを消したいなら，列のタイプを指定するか，`show_col_types = FALSE`を指定してね。ということです。無視して大丈夫です。
:::

日経NEEDSからダウンロードしたデータの変数名は、`親会社株主に帰属する当期純利益（連結）／当期利益（単独）［累計］`のように長いものがあるので，
分析しやすいように分かりやすい変数名に変更します。
変数名は半角英数の単語をアンダーバーでつなげたスネークケース(snake case)で書くことが推奨されます。

:::{.column-margin}
たとえば，`total_asset`や`num_employee`のように，変数名から中身が想像できる名前にすることが望ましいです。
一時的につかう変数であれば，`x`とか`g`でもよいですが，分析結果を他の人に見せるときは，分かりやすい変数名に変更することが望ましいです。
データフレームなら，`df_hoge`，テーブルなら`tbl_hoge`，行列なら`mat_hoge`など，変数名の先頭にデータ型を示す接頭辞をつけておくことも推奨されます。
:::

```{r}
# renameで変数名を変更
df <- df |>
  rename(
    nikkei_code = "日経会社コード",
    name = "企業名称",
    date = "決算期",
    kessan = "決算種別",
    renketsu = "連結基準",
    num_employee = "期末従業員数",
    kessan_month = "決算月数",
    listed_code = "上場場部：コード",
    industry_code = "日経業種：コード",
    total_asset = "資産合計",
    tangibles =  "有形固定資産",
    salary =  "【販管費】人件費・福利厚生費［累計］",
    rent_fee = "【販管費】賃借料［累計］",
    corporate_tax = "法人税等［累計］",
    tax_adjustment = "法人税等調整額／繰延税金費用［累計］",
    net_income =   "親会社株主に帰属する当期純利益（連結）／当期利益（単独）［累計］",
    interest_expense = "支払利息・割引料［累計］",
    sales = "売上高・営業収益［累計］"
  )
```

データが読み込めたら、まずは`head()`関数や`summary()`関数でデータの中身を確認します。

```{r}
head(df)
summary(df)
```

`summary()`の出力を見ると，各変数の記述統計量と欠損値`NA`の個数が表示されています。
賃借料`rent_fee`と支払利息`interest_expense`の欠損値が比較的多いように見えますが，これは企業が支払っている賃借料や支払利息が小さく，損益計算書に記載されていないだけなので，ここではゼロを代入するようにします。

:::{.column-margin}
(連結)財務諸表では，金額の小さな項目を「その他」にまとめて記載するため，金額が小さい個別の項目はデータ上欠損値になりますが，欠損しているわけではなく，金額が小さいだけなので，ここではゼロを代入しています。
:::

`NA`にゼロを代入するには，`is.na()`関数を使います。
`is.na()`関数は`NA`に`TRUE`を返す関数で，これをつかって`TRUE`となる値にゼロを代入する処理を行います。

:::{.callout-tip collapse="true"}
## 欠損値にゼロを入れる

たとえば，次のようなベクトル`x`に`NA`が含まれているかどうかを調べてみます。
```{r}
x <- c(1,2,NA,4,5)
is.na(x)
```
すると，`FALSE FALSE TRUE FALSE FALSE`と表示され，3番目の要素が`NA`であることが分かります。ここに3を代入するには，次のようにします。
```{r}
x[is.na(x)] <- 3
x
```
`x[is.na(x)]`とすると，`x`の中で`NA`の要素を取り出すことができ，そこに3を代入しています。
:::

```{r}
df$rent_fee[is.na(df$rent_fee)] <- 0
df$interest_expense[is.na(df$interest_expense)] <- 0
```

それ以外にも欠損値をもつ項目はありますが，売上高や当期純利益が欠損値となっているのは異常なので，そういった行は後で`filter()`関数で除外します。
データの構造を`glimpse()`関数で再確認します。

```{r}
glimpse(df)
```

日経コード`nikkei_code`と企業名称`name`、決算期`date`の３つは文字列`<chr>`で、それ以外の変数は数値`<dbl>`となっています。
しかし、実際は、`kessan`、`renketsu`、`listed_code`、`industry_code`はカテゴリカルデータであるため、`factor`型に変換します。

```{r}
df <- df |>
  mutate(
    kessan = as.factor(kessan),
    renketsu = as.factor(renketsu),
    listed_code = as.factor(listed_code),
    industry_code = as.factor(industry_code) # ファクター
  )
```

また財務比率は**分数**で計算されるため、分母がゼロあるいはゼロに近い値をもつと、計算ができなかったり、異常に大きい値が出てきたりします。
そのため、分母となる変数にゼロが含まないようにし、また異常値を除外します。
実証研究では、連続変数に対して上下1%以上の異常値を除外することが多いです。

```{r}

df <- df |> # 売上高、有形固定資産、従業員数が0の企業を除外
  filter(sales > 0 & tangibles > 0 & num_employee > 0) |>
  drop_na() # それ以外の欠損値をもつ行を削除
```

最後にデータを確認してみます。

```{r}
summary(df)
```

これで前処理が終わったので，次は生産性の分析に移っていきます。


